	public static ArrayList < RatBean > deepShit() {
	    String sql = "select r.restaurantiD, res.name, count(*)/rtg.sm positive_rating" +
	        "from rating r, restaurant res,(select sum(sentiment) as sm, restaurantiD" +
	        "from rating rt" +
	        "group by restaurantiD) as rtg" +
	        "where" +
	        "r.restaurantiD = rtg.restaurantiD" +
	        "and res.restaurantiD = r.restaurantiD" +
	        "group by r.restaurantiD, rtg.sm, res.name" +
	        "order by positive_rating desc";

	    ArrayList < RatBean > returnOfO = new ArrayList < RatBean > ();

	    try {
	        ResultSet rs = conn.prepareStatement(sql).executeQuery(sql);
	        while (rs.next()) {
	            RatBean temp = new RatBeans(rs.getInt("restaurantID"), rs.getString("name"), Double.valueOf(rs.getString("positive_rating")));

	            returnOfO.add(temp);
	        }
	        return returnOfO;
	    } catch (SQLException e) {
	        System.out.println("Aleks error JAVAUtils o) ha-ha");
	    }
	    return null;



	}


	public static ArrayList < OBeans > o(Connection conn) {
	    String sql = " select deviations.userid ,deviations.dev ,rat.name as user_name ,rat.type ,rat.e_mail ,rating.food ,r.name as rest_name\n" +
	        "from (select stddev(food) dev, rater.userid userid\n" +
	        "from rating natural join rater\n" +
	        "group by rater.userid) as deviations,\n" +

	        "(select max(internDev.dev) devMax\n" +
	        "from\n" +
	        "(select stddev(food) dev, rater.userid userid\n" +
	        "from rating natural join rater\n" +
	        "group by rater.userid) as internDev)\n" +
	        "as deviationsMax,\n" +
	        "rater rat,\n" +
	        "rating,\n" +
	        "restaurant r\n" +
	        "where deviations.dev = deviationsMax.devMax and rat.userid= deviations.userid and rating.userid = rat.userid and r.restaurantid = rating.restaurantid\n";

	    ArrayList < OBeans > returnOfO = new ArrayList < OBeans > ();

	    try {
	        ResultSet rs = conn.prepareStatement(sql).executeQuery(sql);
	        while (rs.next()) {
	            OBeans temp = new OBeans(rs.getString("userid"), Double.valueOf(rs.getString("dev")), rs.getString("user_name"), rs.getInt("type"), rs.getString("e_mail"), rs.getInt("food"), rs.getString("rest_name"));
	            //	temp.add(rs.getString("userid"));
	            //	temp.add(rs.getString("dev"));
	            //	temp.add(rs.getString("ratName"));
	            //	temp.add(rs.getString("type"));
	            //	temp.add(rs.getString("e_mail"));
	            //	temp.add(rs.getString("food"));
	            //	temp.add(rs.getString("name"));
	            returnOfO.add(temp);
	        }
	        return returnOfO;
	    } catch (SQLException e) {
	        System.out.println("Aleks error JAVAUtils o) ha-ha");
	    }
	    return null;
	}

	public static ArrayList < Rater > n(Connection conn) {
	    String sql = "select rat.name, rat.e_mail\n" +
	        "from rater rat,	\n" +
	        "(select (avg(price) + avg(food) + avg(mood) + avg(staff)) as tottalRating, rater.userid as thisguy\n" +
	        "from rater, rating\n" +
	        "where rater.userid = rating.userid\n" +
	        "group by rater.userid\n" +
	        ") as userinfo,\n" +

	        "(select (avg(price) + avg(food) + avg(mood) + avg(staff)) as tottalRating\n" +
	        "from rater jrat, rating jrt\n" +
	        "where jrat.userid = jrt.userid\n" +
	        "and jrat.name = 'John') as john\n" +

	        "where rat.userid = userinfo.thisguy\n" +
	        "and userinfo.tottalRating < john.tottalRating\n";


	    ArrayList < Rater > outN = new ArrayList < Rater > ();
	    try {
	        //PrepareStatement pstm = ;
	        ResultSet rs = conn.prepareStatement(sql).executeQuery();
	        while (rs.next()) {
	            Rater temp = new Rater();
	            temp.setName(rs.getString("name"));
	            temp.setEmail(rs.getString("email"));
	            outN.add(temp);
	        }
	        return outN;
	    } catch (SQLException e) {
	        System.out.println("Aleks error JAVAUtils n) ha-ha");
	    }
	    return null;
	}
	public static ArrayList < MBeans > m(Connection conn, String restaurant) {
	    String sql = "select rat.name as user_name, rat.reputation, rt.comment, mi.name, mi.price\n" +
	        "from rater rat, restaurant r, rating rt, \n" +
	        "menuitem mi, ratingitem ri, (select count(*) as tottal, rat.userid as rater\n" +
	        "from rating rt, rater rat, restaurant r\n" +
	        "where rt.userid = rat.userid\n" +
	        "and r.restaurantid = rt.restaurantid\n" +
	        "-- z is place holder\n" +
	        "and r.name = ?\n" +
	        "group by rat.userid\n" +
	        ") as ratings,\n" +
	        "(select max (ratings.tottal) as max_tottal\n" +
	        "from  (select count(*) as tottal, rat.userid\n" +
	        "from rating rt, rater rat, restaurant r\n" +
	        "where rt.userid = rat.userid\n" +
	        "and r.restaurantid = rt.restaurantid\n" +
	        "-- z is place holder\n" +
	        "and r.name = ?\n" +
	        "group by rat.userid\n" +
	        ") as ratings\n" +
	        ") as max_ratings\n" +
	        "where ratings.rater = rat.userid\n" +
	        "	and ratings.tottal = max_ratings.max_tottal\n" +
	        "	and rt.restaurantid = r.restaurantid\n" +
	        "and rt.userid = rat.userid\n" +
	        "-- z is place holder\n" +
	        "and r.name = ?\n" +
	        "and mi.restaurantid = r.restaurantid\n" +
	        "and mi.itemid = ri.itemid\n";


	    ArrayList < MBeans > outM = new ArrayList < MBeans > ();
	    try {
	        PreparedStatement pstm = conn.prepareStatement(sql);
	        pstm.setString(1, restaurant);
	        pstm.setString(2, restaurant);
	        pstm.setString(3, restaurant);

	        ResultSet rs = pstm.executeQuery();
	        while (rs.next()) {
	            MBeans temp = new MBeans(rs.getString("user_name"), rs.getInt("reputation"), rs.getString("comment"), rs.getString("name"), rs.getInt("price"));
	            //	temp.add(rs.getString("name"));
	            //	temp.add(rs.getString("reputation"));
	            //	temp.add(rs.getString("comment"));
	            //	temp.add(rs.getString("name"));
	            //	temp.add(rs.getString("price"));
	            outM.add(temp);
	        }
	        return outM;
	    } catch (SQLException e) {
	        System.out.println("Aleks m) ha-ha");
	    }
	    return null;
	}

	public static ArrayList < LBeans > l(Connection conn) {
	    String sql = "select rat.name as user_name, rat.reputation, food + mood as rating," +
	        "r.name as rest_name, rt.date" +
	        "from rater rat, rating rt, restaurant r" +
	        "where rat.userid = rt.userid" +
	        "and rt.restaurantID = r.restaurantID" +
	        "order by rating desc" +
	        "limit 10";
	    ArrayList < LBeans > outL = new ArrayList < LBeans > ();
	    try {
	        ResultSet rs = conn.prepareStatement(sql).executeQuery();
	        while (rs.next()) {
	            LBeans temp = new LBeans(rs.getString("user_name"), rs.getInt("reputation"), rs.getInt("rating"), rs.getString("rest_name"), rs.getDate("date"));
	            //temp.add(rs.getString("rater"));
	            //temp.add(rs.getString("reputation"));
	            //temp.add(rs.getString("rating"));
	            //temp.add(rs.getString("name"));
	            //temp.add(rs.getString("date"));
	            outL.add(temp);
	        }
	        return outL;
	    } catch (SQLException e) {
	        System.out.println("Aleks l) ho-ho-ho");
	    }
	    return null;
	}
	public static ArrayList < KBean > k(Connection conn) {
	    String sql = "select rat.name as user_name, rat.join_date, rat.reputation, food + mood as rating," +
	        "r.name as rest_name, rt.date" +
	        "from rater rat, rating rt, restaurant r" +
	        "where rat.userid = rt.userid" +
	        "and rt.restaurantID = r.restaurantID" +
	        "order by rating desc" +
	        "limit 10";
	    ArrayList < KBean > outK = new ArrayList < KBean > ();
	    try {
	        ResultSet rs = conn.prepareStatement(sql).executeQuery();
	        while (rs.next()) {
	            KBean temp = new KBean((rs.getString("user_name")), rs.getDate("join_date"), rs.getInt("reputation"), rs.getInt("rating"), rs.getString("rest_name"), rs.getDate("date"));
	            //	temp.add(rs.getString("rater"));
	            //	temp.add(rs.getString("join_date"));
	            //	temp.add(rs.getString("reputation"));
	            //	temp.add(rs.getString("rating"));
	            //	temp.add(rs.getString("name"));
	            //	temp.add(rs.getString("date"));

	            outK.add(temp);
	        }
	        return outK;
	    } catch (SQLException e) {
	        System.out.println("Aleks k) ooo");
	    }
	    return null;
	}